/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package supermarket;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SampritBiswas
 */
public class RequiredItemsGUI extends javax.swing.JFrame {

    /**
     * Creates new form RequiredItemsGUI
     */
    public RequiredItemsGUI() {
        getItems();
        initComponents();
        printTable();
        setVisible(true);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setLocation(450, 300);
        requiredTable.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        requiredTable = new javax.swing.JTable();
        typeButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        manufacturerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        requiredTable.setModel(model);
        jScrollPane1.setViewportView(requiredTable);

        typeButton.setText("View by Type");
        typeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        manufacturerButton.setText("View by manufacturer");
        manufacturerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufacturerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(typeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetButton)
                        .addGap(31, 31, 31)
                        .addComponent(manufacturerButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeButton)
                    .addComponent(resetButton)
                    .addComponent(manufacturerButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        int del = requiredTable.getRowCount();
        for (int i = 0; i < del; i++) {

            requiredTable.getModel().setValueAt(null, i, 0);
            requiredTable.getModel().setValueAt("", i, 1);
            requiredTable.getModel().setValueAt("", i, 2);
            requiredTable.getModel().setValueAt("", i, 3);
            ((DefaultTableModel) requiredTable.getModel()).removeRow(i);
            del = requiredTable.getRowCount();
            i--;
        }
        fillTable();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void typeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeButtonActionPerformed
        String strT = JOptionPane.showInputDialog(null, "Enter the Type Name : ",
                "Item Type", JOptionPane.QUESTION_MESSAGE);
        int i = 0;
        boolean exist = false;


        for (Item it : reqItem) {
            if (it.getType().equalsIgnoreCase(strT) == false) {
                continue;
            }
            exist = true;

            if (i >= requiredTable.getRowCount()) {
                Object row[] = {"", "", "", ""};
                model.addRow(row);
                rowCount++;
            }
            requiredTable.getModel().setValueAt(it.getItemName(), i, 0);
            requiredTable.getModel().setValueAt(it.getType(), i, 1);
            requiredTable.getModel().setValueAt(it.getManufacturer(), i, 2);
            requiredTable.getModel().setValueAt(it.getSellPrice(), i, 3);
            i++;
        }

        if (exist == false) {
            JOptionPane.showMessageDialog(this, "This Item Type not present in this table!!!");
            return;
        }

        int del = requiredTable.getRowCount();
        for (; i < del; i++) {
            /*salesTable.getModel().setValueAt(null, i, 0);
             salesTable.getModel().setValueAt("", i, 1);
             salesTable.getModel().setValueAt("", i, 2);
             salesTable.getModel().setValueAt("", i, 3);*/
            ((DefaultTableModel) requiredTable.getModel()).removeRow(i);
            del--;
            i--;
        }
    }//GEN-LAST:event_typeButtonActionPerformed

    private void manufacturerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufacturerButtonActionPerformed
        String strT = JOptionPane.showInputDialog(null, "Enter the Manufacturer : ",
                "Manufacturer", JOptionPane.QUESTION_MESSAGE);
        int i = 0;
        boolean exist = false;
        float tot = 0;

        for (Item it : reqItem) {
            if (it.getManufacturer().equalsIgnoreCase(strT) == false) {
                continue;
            }
            exist = true;

            if (i >= requiredTable.getRowCount()) {
                Object row[] = {"", "", "", ""};
                model.addRow(row);
                rowCount++;

            }

            requiredTable.getModel().setValueAt(it.getItemName(), i, 0);
            requiredTable.getModel().setValueAt(it.getType(), i, 1);
            requiredTable.getModel().setValueAt(it.getManufacturer(), i, 2);
            requiredTable.getModel().setValueAt(it.getSellPrice(), i, 3);
            i++;
        }

        if (exist == false) {
            JOptionPane.showMessageDialog(this, "This Manufacturer not present in this table!!!");
            return;
        }

        int del = requiredTable.getRowCount();
        for (; i < del; i++) {
            /*salesTable.getModel().setValueAt(null, i, 0);
             salesTable.getModel().setValueAt("", i, 1);
             salesTable.getModel().setValueAt("", i, 2);
             salesTable.getModel().setValueAt("", i, 3);*/
            ((DefaultTableModel) requiredTable.getModel()).removeRow(i);
            del--;
            i--;
        }
    }//GEN-LAST:event_manufacturerButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RequiredItemsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RequiredItemsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RequiredItemsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RequiredItemsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RequiredItemsGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton manufacturerButton;
    private javax.swing.JTable requiredTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton typeButton;
    // End of variables declaration//GEN-END:variables
    int rows = 0;
    Object columnNames[] = {"Name", "Type", "Manufacturer", "Price"};
    DefaultTableModel model = new DefaultTableModel(columnNames, rows);
    int rowCount = 0;
    
    ArrayList<Bill> bill = new ArrayList<>();
    ArrayList<Item> item = new ArrayList<>();
    ArrayList<Item> soldItem = new ArrayList<>();
    ArrayList<Item> reqItem = new ArrayList<>();

    public void getItems() {
        bill = new GetInfoFromFiles().getBills();
        item = new GetInfoFromFiles().getItems();
    }

    public void printTable() {

        for (Bill b : bill) {
            for (Item i : b.getBillItem()) {
                soldItem.add(i);
            }
        }

        int ci = 0, cj = 0;
        for (Item i : soldItem) {
            cj = 0;
            for (Item j : soldItem) {

                if (cj >= ci) {
                    continue;
                }
                if (i.getID().compareToIgnoreCase(j.getID()) < 0) {
                    Item temp = soldItem.get(ci);
                    soldItem.set(ci, soldItem.get(cj));
                    soldItem.set(cj, temp);
                }
                cj++;
            }
            ci++;
        }

        int size = soldItem.size();

        int j = 0;
        for (j = 0; j < size - 1; j++) {

            if (soldItem.get(j).getID().equalsIgnoreCase(soldItem.get(j + 1).getID())) {

                //showItems.get(j).setNoOfItems(showItems.get(j).getItemsBought() + showItems.get(j + 1).getItemsBought());
                soldItem.get(j).setItemsBought(soldItem.get(j).getItemsBought() + soldItem.get(j + 1).getItemsBought());
                soldItem.remove(j + 1);
                size = soldItem.size();
                j--;
            }

        }
        boolean available = false;
        for (Item i : soldItem) {
            available = false;
            for (Item ij : item) {
                if (i.getID().equalsIgnoreCase(ij.getID())) {
                    available = true;
                    break;
                }
            }
            if (available == false) {
                reqItem.add(i);
            }
        }
        
        fillTable();
    }

    public void fillTable() {


        int i = 0;
        for (Item it : reqItem) {

            Object row[] = {"", "", "", ""};
            model.addRow(row);
            rowCount++;

            requiredTable.getModel().setValueAt(it.getItemName(), i, 0);
            requiredTable.getModel().setValueAt(it.getType(), i, 1);
            requiredTable.getModel().setValueAt(it.getManufacturer(), i, 2);
            requiredTable.getModel().setValueAt(it.getSellPrice(), i, 3);
            i++;
        }
    }
}
