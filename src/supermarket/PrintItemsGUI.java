/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package supermarket;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SampritBiswas
 */
public class PrintItemsGUI extends javax.swing.JFrame {

    int accesslevel = 0;

    /**
     * Creates new form PrintItemsGUI
     */
    public PrintItemsGUI(int a) {
        
                
        accesslevel = a;
        getItems();
        initComponents();
        //setLocation(450, 200);
        printHighScores();
        if (a == 0) {
            submitButton.setVisible(false);
        }
        jTable1.setAutoCreateRowSorter(true);

        jTable1.setDragEnabled(true);
        final NewItemGUI newItemGui = new NewItemGUI();

        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                newItemGui.setVisible(false);
                jTable1.clearSelection();
            }
        });


        jTable1.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {

                int row = jTable1.rowAtPoint(e.getPoint());


                if (row > -1) {

                    jTable1.clearSelection();
                    jTable1.setRowSelectionInterval(row, row);
                    jTable1.setSelectionBackground(new Color(255, 54, 54));
                    if (jTable1.getValueAt(row, 0) == null || jTable1.getValueAt(row, 0).toString().equalsIgnoreCase("")) {
                        newItemGui.setVisible(false);
                        return;
                    }

                    newItemGui.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                    newItemGui.setVisible(true);
                    //newItemGui.setLocation(450, 200);
                    newItemGui.setLocation(e.getX() +20, e.getY() + 80);
                    newItemGui.hoverID = jTable1.getValueAt(row, 0).toString();
                    newItemGui.addData();
                    newItemGui.submitButton.setVisible(false);

                    if (newItemGui.isVisible() == false) {
                        newItemGui.setVisible(true);
                    }

                } else {
                    jTable1.setSelectionBackground(Color.RED);
                }
            }
        });

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        submitButton = new javax.swing.JButton();
        itemTypeButton = new javax.swing.JButton();
        manufacturerButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );

        jTable1.setBackground(new java.awt.Color(204, 255, 204));
        jTable1.setModel(model);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTable1);

        jScrollPane1.setBounds(0, 0, 420, 320);
        jLayeredPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        submitButton.setText("Submit");
        submitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });
        submitButton.setBounds(160, 320, 100, 30);
        jLayeredPane1.add(submitButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        itemTypeButton.setText("View By Item Type");
        itemTypeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itemTypeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        itemTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTypeButtonActionPerformed(evt);
            }
        });
        itemTypeButton.setBounds(0, 320, 130, 30);
        jLayeredPane1.add(itemTypeButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        manufacturerButton.setText("View by Manufacturer");
        manufacturerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        manufacturerButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        manufacturerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufacturerButtonActionPerformed(evt);
            }
        });
        manufacturerButton.setBounds(270, 320, 150, 30);
        jLayeredPane1.add(manufacturerButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        resetButton.setText("Reset");
        resetButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        resetButton.setBounds(163, 320, 100, 30);
        jLayeredPane1.add(resetButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 304, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        for (Item i : dataBaseItems) {
            for (int j = 0; j < jTable1.getRowCount(); j++) {
                if (jTable1.getValueAt(j, 0) != null) {
                    if (i.getID().equalsIgnoreCase(jTable1.getValueAt(j, 0).toString())) {
                        i.setSellPrice(Float.parseFloat(jTable1.getValueAt(j, 2).toString()));
                    }
                }
            }
        }
        try {
            FileOutputStream fileStream = new FileOutputStream("DataBase.ser");
            ObjectOutputStream os = new ObjectOutputStream(fileStream);
            os.writeObject(dataBaseItems);
            os.close();
        } catch (IOException ex) {
            System.out.println("\nFile Not Found!!!");
            ex.printStackTrace();
        }

        WriteToServer wr = new WriteToServer();
        wr.writeDataBase();
        setVisible(false);
    }//GEN-LAST:event_submitButtonActionPerformed

    private void itemTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTypeButtonActionPerformed
        String strT = JOptionPane.showInputDialog(null, "Enter the Item Type : ",
                "Item Type", JOptionPane.QUESTION_MESSAGE);
        int i = 0;
        boolean exist = false;
        for (Item item : dataBaseItems) {
            if (item.getType().equalsIgnoreCase(strT) == false) {
                continue;
            }
            exist = true;

            if (i >= jTable1.getRowCount()) {
                Object row[] = {item.getID(), item.getItemName(), item.getSellPrice(), item.getNoOfItems()};
                model.addRow(row);
                rowCount++;
                i++;
                continue;
            }

            jTable1.getModel().setValueAt(item.getID(), i, 0);
            jTable1.getModel().setValueAt(item.getItemName(), i, 1);
            jTable1.getModel().setValueAt(item.getSellPrice(), i, 2);
            jTable1.getModel().setValueAt(item.getNoOfItems(), i, 3);
            i++;
        }

        if (exist == false) {
            JOptionPane.showMessageDialog(this, "This Item Type does not exist!!!");
            return;
        }

        int del = jTable1.getRowCount();
        for (; i < del; i++) {
            jTable1.getModel().setValueAt(null, i, 0);
            jTable1.getModel().setValueAt("", i, 1);
            jTable1.getModel().setValueAt("", i, 2);
            jTable1.getModel().setValueAt("", i, 3);
            ((DefaultTableModel) jTable1.getModel()).removeRow(i);
            del--;
            i--;
        }
    }//GEN-LAST:event_itemTypeButtonActionPerformed

    private void manufacturerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufacturerButtonActionPerformed
        String strT = JOptionPane.showInputDialog(null, "Enter the Manufacturer: ",
                "Manufcturer", JOptionPane.QUESTION_MESSAGE);

        int i = 0;
        boolean exist = false;
        for (Item item : dataBaseItems) {
            if (item.getManufacturer().equalsIgnoreCase(strT) == false) {
                continue;
            }
            exist = true;

            if (i >= jTable1.getRowCount()) {
                Object row[] = {item.getID(), item.getItemName(), item.getSellPrice(), item.getNoOfItems()};
                model.addRow(row);
                rowCount++;
                i++;
                continue;
            }

            jTable1.getModel().setValueAt(item.getID(), i, 0);
            jTable1.getModel().setValueAt(item.getItemName(), i, 1);
            jTable1.getModel().setValueAt(item.getSellPrice(), i, 2);
            jTable1.getModel().setValueAt(item.getNoOfItems(), i, 3);
            i++;
        }

        if (exist == false) {
            JOptionPane.showMessageDialog(this, "This Item Manufacturer does not exist!!!");
            return;
        }

        int del = jTable1.getRowCount();
        for (; i < del; i++) {
            jTable1.getModel().setValueAt(null, i, 0);
            jTable1.getModel().setValueAt("", i, 1);
            jTable1.getModel().setValueAt("", i, 2);
            jTable1.getModel().setValueAt("", i, 3);
            ((DefaultTableModel) jTable1.getModel()).removeRow(i);
            del--;
            i--;
        }
    }//GEN-LAST:event_manufacturerButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        int del = jTable1.getRowCount();
        for (int i = 0; i < del; i++) {
            ((DefaultTableModel) jTable1.getModel()).removeRow(i);
            del--;
            i--;
        }
        printHighScores();
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;




                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrintItemsGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrintItemsGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrintItemsGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrintItemsGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /* java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
         new PrintItemsGUI().setVisible(true);
         }
         });*/
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton itemTypeButton;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    public javax.swing.JButton manufacturerButton;
    public javax.swing.JButton resetButton;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
    ArrayList<Item> dataBaseItems;
    int rows = 0;
    Object columnNames[] = {"Item ID", "Name", "Price", "Number of Items"};
    DefaultTableModel model = new DefaultTableModel(columnNames, rows) {
        @Override
        public Class<?> getColumnClass(int column) {
            switch (column) {
                case 0:
                    return String.class;
                case 1:
                    return String.class;
                case 2:
                    return Float.class;
                case 3:
                    return Float.class;
                default:
                    return String.class;
            }
        }
    };
    int rowCount = 0;

    private void getItems() {
        dataBaseItems = new GetInfoFromFiles().getItems();
    }

    private void printHighScores() {


        int i = 0;

        for (Item item : dataBaseItems) {

            /*jTable1.getModel().setValueAt(item.getID(), i, 0);
             jTable1.getModel().setValueAt(item.getItemName(), i, 1);
             jTable1.getModel().setValueAt(item.getSellPrice(), i, 2);
             jTable1.getModel().setValueAt(item.getNoOfItems(), i, 3);*/
            i++;
            Object row[] = {item.getID(), item.getItemName(), item.getSellPrice(), item.getNoOfItems()};
            model.addRow(row);
            rowCount++;
        }

    }
}
